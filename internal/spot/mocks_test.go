// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package spot

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// newMockadvisorProvider creates a new instance of mockadvisorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockadvisorProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockadvisorProvider {
	mock := &mockadvisorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockadvisorProvider is an autogenerated mock type for the advisorProvider type
type mockadvisorProvider struct {
	mock.Mock
}

type mockadvisorProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockadvisorProvider) EXPECT() *mockadvisorProvider_Expecter {
	return &mockadvisorProvider_Expecter{mock: &_m.Mock}
}

// getInstanceType provides a mock function for the type mockadvisorProvider
func (_mock *mockadvisorProvider) getInstanceType(instance string) (TypeInfo, error) {
	ret := _mock.Called(instance)

	if len(ret) == 0 {
		panic("no return value specified for getInstanceType")
	}

	var r0 TypeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (TypeInfo, error)); ok {
		return returnFunc(instance)
	}
	if returnFunc, ok := ret.Get(0).(func(string) TypeInfo); ok {
		r0 = returnFunc(instance)
	} else {
		r0 = ret.Get(0).(TypeInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(instance)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockadvisorProvider_getInstanceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getInstanceType'
type mockadvisorProvider_getInstanceType_Call struct {
	*mock.Call
}

// getInstanceType is a helper method to define mock.On call
//   - instance string
func (_e *mockadvisorProvider_Expecter) getInstanceType(instance interface{}) *mockadvisorProvider_getInstanceType_Call {
	return &mockadvisorProvider_getInstanceType_Call{Call: _e.mock.On("getInstanceType", instance)}
}

func (_c *mockadvisorProvider_getInstanceType_Call) Run(run func(instance string)) *mockadvisorProvider_getInstanceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockadvisorProvider_getInstanceType_Call) Return(typeInfo TypeInfo, err error) *mockadvisorProvider_getInstanceType_Call {
	_c.Call.Return(typeInfo, err)
	return _c
}

func (_c *mockadvisorProvider_getInstanceType_Call) RunAndReturn(run func(instance string) (TypeInfo, error)) *mockadvisorProvider_getInstanceType_Call {
	_c.Call.Return(run)
	return _c
}

// getRange provides a mock function for the type mockadvisorProvider
func (_mock *mockadvisorProvider) getRange(index int) (Range, error) {
	ret := _mock.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for getRange")
	}

	var r0 Range
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (Range, error)); ok {
		return returnFunc(index)
	}
	if returnFunc, ok := ret.Get(0).(func(int) Range); ok {
		r0 = returnFunc(index)
	} else {
		r0 = ret.Get(0).(Range)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockadvisorProvider_getRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getRange'
type mockadvisorProvider_getRange_Call struct {
	*mock.Call
}

// getRange is a helper method to define mock.On call
//   - index int
func (_e *mockadvisorProvider_Expecter) getRange(index interface{}) *mockadvisorProvider_getRange_Call {
	return &mockadvisorProvider_getRange_Call{Call: _e.mock.On("getRange", index)}
}

func (_c *mockadvisorProvider_getRange_Call) Run(run func(index int)) *mockadvisorProvider_getRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockadvisorProvider_getRange_Call) Return(rangeParam Range, err error) *mockadvisorProvider_getRange_Call {
	_c.Call.Return(rangeParam, err)
	return _c
}

func (_c *mockadvisorProvider_getRange_Call) RunAndReturn(run func(index int) (Range, error)) *mockadvisorProvider_getRange_Call {
	_c.Call.Return(run)
	return _c
}

// getRegionAdvice provides a mock function for the type mockadvisorProvider
func (_mock *mockadvisorProvider) getRegionAdvice(region string, os string) (map[string]spotAdvice, error) {
	ret := _mock.Called(region, os)

	if len(ret) == 0 {
		panic("no return value specified for getRegionAdvice")
	}

	var r0 map[string]spotAdvice
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (map[string]spotAdvice, error)); ok {
		return returnFunc(region, os)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) map[string]spotAdvice); ok {
		r0 = returnFunc(region, os)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]spotAdvice)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(region, os)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockadvisorProvider_getRegionAdvice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getRegionAdvice'
type mockadvisorProvider_getRegionAdvice_Call struct {
	*mock.Call
}

// getRegionAdvice is a helper method to define mock.On call
//   - region string
//   - os string
func (_e *mockadvisorProvider_Expecter) getRegionAdvice(region interface{}, os interface{}) *mockadvisorProvider_getRegionAdvice_Call {
	return &mockadvisorProvider_getRegionAdvice_Call{Call: _e.mock.On("getRegionAdvice", region, os)}
}

func (_c *mockadvisorProvider_getRegionAdvice_Call) Run(run func(region string, os string)) *mockadvisorProvider_getRegionAdvice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockadvisorProvider_getRegionAdvice_Call) Return(stringToSpotAdviceMoqParam map[string]spotAdvice, err error) *mockadvisorProvider_getRegionAdvice_Call {
	_c.Call.Return(stringToSpotAdviceMoqParam, err)
	return _c
}

func (_c *mockadvisorProvider_getRegionAdvice_Call) RunAndReturn(run func(region string, os string) (map[string]spotAdvice, error)) *mockadvisorProvider_getRegionAdvice_Call {
	_c.Call.Return(run)
	return _c
}

// getRegions provides a mock function for the type mockadvisorProvider
func (_mock *mockadvisorProvider) getRegions() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for getRegions")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// mockadvisorProvider_getRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getRegions'
type mockadvisorProvider_getRegions_Call struct {
	*mock.Call
}

// getRegions is a helper method to define mock.On call
func (_e *mockadvisorProvider_Expecter) getRegions() *mockadvisorProvider_getRegions_Call {
	return &mockadvisorProvider_getRegions_Call{Call: _e.mock.On("getRegions")}
}

func (_c *mockadvisorProvider_getRegions_Call) Run(run func()) *mockadvisorProvider_getRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockadvisorProvider_getRegions_Call) Return(strings []string) *mockadvisorProvider_getRegions_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *mockadvisorProvider_getRegions_Call) RunAndReturn(run func() []string) *mockadvisorProvider_getRegions_Call {
	_c.Call.Return(run)
	return _c
}

// newMockpricingProvider creates a new instance of mockpricingProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockpricingProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockpricingProvider {
	mock := &mockpricingProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockpricingProvider is an autogenerated mock type for the pricingProvider type
type mockpricingProvider struct {
	mock.Mock
}

type mockpricingProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockpricingProvider) EXPECT() *mockpricingProvider_Expecter {
	return &mockpricingProvider_Expecter{mock: &_m.Mock}
}

// getSpotPrice provides a mock function for the type mockpricingProvider
func (_mock *mockpricingProvider) getSpotPrice(instance string, region string, os string) (float64, error) {
	ret := _mock.Called(instance, region, os)

	if len(ret) == 0 {
		panic("no return value specified for getSpotPrice")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (float64, error)); ok {
		return returnFunc(instance, region, os)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) float64); ok {
		r0 = returnFunc(instance, region, os)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(instance, region, os)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockpricingProvider_getSpotPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSpotPrice'
type mockpricingProvider_getSpotPrice_Call struct {
	*mock.Call
}

// getSpotPrice is a helper method to define mock.On call
//   - instance string
//   - region string
//   - os string
func (_e *mockpricingProvider_Expecter) getSpotPrice(instance interface{}, region interface{}, os interface{}) *mockpricingProvider_getSpotPrice_Call {
	return &mockpricingProvider_getSpotPrice_Call{Call: _e.mock.On("getSpotPrice", instance, region, os)}
}

func (_c *mockpricingProvider_getSpotPrice_Call) Run(run func(instance string, region string, os string)) *mockpricingProvider_getSpotPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockpricingProvider_getSpotPrice_Call) Return(f float64, err error) *mockpricingProvider_getSpotPrice_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *mockpricingProvider_getSpotPrice_Call) RunAndReturn(run func(instance string, region string, os string) (float64, error)) *mockpricingProvider_getSpotPrice_Call {
	_c.Call.Return(run)
	return _c
}

// newMockscoreProvider creates a new instance of mockscoreProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockscoreProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockscoreProvider {
	mock := &mockscoreProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockscoreProvider is an autogenerated mock type for the scoreProvider type
type mockscoreProvider struct {
	mock.Mock
}

type mockscoreProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockscoreProvider) EXPECT() *mockscoreProvider_Expecter {
	return &mockscoreProvider_Expecter{mock: &_m.Mock}
}

// enrichWithScores provides a mock function for the type mockscoreProvider
func (_mock *mockscoreProvider) enrichWithScores(ctx context.Context, advices []Advice, singleAZ bool, timeout time.Duration) error {
	ret := _mock.Called(ctx, advices, singleAZ, timeout)

	if len(ret) == 0 {
		panic("no return value specified for enrichWithScores")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []Advice, bool, time.Duration) error); ok {
		r0 = returnFunc(ctx, advices, singleAZ, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockscoreProvider_enrichWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'enrichWithScores'
type mockscoreProvider_enrichWithScores_Call struct {
	*mock.Call
}

// enrichWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - advices []Advice
//   - singleAZ bool
//   - timeout time.Duration
func (_e *mockscoreProvider_Expecter) enrichWithScores(ctx interface{}, advices interface{}, singleAZ interface{}, timeout interface{}) *mockscoreProvider_enrichWithScores_Call {
	return &mockscoreProvider_enrichWithScores_Call{Call: _e.mock.On("enrichWithScores", ctx, advices, singleAZ, timeout)}
}

func (_c *mockscoreProvider_enrichWithScores_Call) Run(run func(ctx context.Context, advices []Advice, singleAZ bool, timeout time.Duration)) *mockscoreProvider_enrichWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []Advice
		if args[1] != nil {
			arg1 = args[1].([]Advice)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockscoreProvider_enrichWithScores_Call) Return(err error) *mockscoreProvider_enrichWithScores_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockscoreProvider_enrichWithScores_Call) RunAndReturn(run func(ctx context.Context, advices []Advice, singleAZ bool, timeout time.Duration) error) *mockscoreProvider_enrichWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// newMockawsAPIProvider creates a new instance of mockawsAPIProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockawsAPIProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockawsAPIProvider {
	mock := &mockawsAPIProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockawsAPIProvider is an autogenerated mock type for the awsAPIProvider type
type mockawsAPIProvider struct {
	mock.Mock
}

type mockawsAPIProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockawsAPIProvider) EXPECT() *mockawsAPIProvider_Expecter {
	return &mockawsAPIProvider_Expecter{mock: &_m.Mock}
}

// fetchScores provides a mock function for the type mockawsAPIProvider
func (_mock *mockawsAPIProvider) fetchScores(ctx context.Context, region string, instanceTypes []string, singleAZ bool) (map[string]int, error) {
	ret := _mock.Called(ctx, region, instanceTypes, singleAZ)

	if len(ret) == 0 {
		panic("no return value specified for fetchScores")
	}

	var r0 map[string]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, bool) (map[string]int, error)); ok {
		return returnFunc(ctx, region, instanceTypes, singleAZ)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, bool) map[string]int); ok {
		r0 = returnFunc(ctx, region, instanceTypes, singleAZ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, bool) error); ok {
		r1 = returnFunc(ctx, region, instanceTypes, singleAZ)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockawsAPIProvider_fetchScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'fetchScores'
type mockawsAPIProvider_fetchScores_Call struct {
	*mock.Call
}

// fetchScores is a helper method to define mock.On call
//   - ctx context.Context
//   - region string
//   - instanceTypes []string
//   - singleAZ bool
func (_e *mockawsAPIProvider_Expecter) fetchScores(ctx interface{}, region interface{}, instanceTypes interface{}, singleAZ interface{}) *mockawsAPIProvider_fetchScores_Call {
	return &mockawsAPIProvider_fetchScores_Call{Call: _e.mock.On("fetchScores", ctx, region, instanceTypes, singleAZ)}
}

func (_c *mockawsAPIProvider_fetchScores_Call) Run(run func(ctx context.Context, region string, instanceTypes []string, singleAZ bool)) *mockawsAPIProvider_fetchScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockawsAPIProvider_fetchScores_Call) Return(stringToInt map[string]int, err error) *mockawsAPIProvider_fetchScores_Call {
	_c.Call.Return(stringToInt, err)
	return _c
}

func (_c *mockawsAPIProvider_fetchScores_Call) RunAndReturn(run func(ctx context.Context, region string, instanceTypes []string, singleAZ bool) (map[string]int, error)) *mockawsAPIProvider_fetchScores_Call {
	_c.Call.Return(run)
	return _c
}
