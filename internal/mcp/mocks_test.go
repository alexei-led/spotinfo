// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mcp

import (
	"context"
	"spotinfo/internal/spot"

	mock "github.com/stretchr/testify/mock"
)

// newMockspotClient creates a new instance of mockspotClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockspotClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockspotClient {
	mock := &mockspotClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockspotClient is an autogenerated mock type for the spotClient type
type mockspotClient struct {
	mock.Mock
}

type mockspotClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockspotClient) EXPECT() *mockspotClient_Expecter {
	return &mockspotClient_Expecter{mock: &_m.Mock}
}

// GetSpotSavings provides a mock function for the type mockspotClient
func (_mock *mockspotClient) GetSpotSavings(ctx context.Context, opts ...spot.GetSpotSavingsOption) ([]spot.Advice, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, opts)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSpotSavings")
	}

	var r0 []spot.Advice
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...spot.GetSpotSavingsOption) ([]spot.Advice, error)); ok {
		return returnFunc(ctx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...spot.GetSpotSavingsOption) []spot.Advice); ok {
		r0 = returnFunc(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spot.Advice)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...spot.GetSpotSavingsOption) error); ok {
		r1 = returnFunc(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockspotClient_GetSpotSavings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpotSavings'
type mockspotClient_GetSpotSavings_Call struct {
	*mock.Call
}

// GetSpotSavings is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...spot.GetSpotSavingsOption
func (_e *mockspotClient_Expecter) GetSpotSavings(ctx interface{}, opts ...interface{}) *mockspotClient_GetSpotSavings_Call {
	return &mockspotClient_GetSpotSavings_Call{Call: _e.mock.On("GetSpotSavings",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *mockspotClient_GetSpotSavings_Call) Run(run func(ctx context.Context, opts ...spot.GetSpotSavingsOption)) *mockspotClient_GetSpotSavings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []spot.GetSpotSavingsOption
		var variadicArgs []spot.GetSpotSavingsOption
		if len(args) > 1 {
			variadicArgs = args[1].([]spot.GetSpotSavingsOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockspotClient_GetSpotSavings_Call) Return(advices []spot.Advice, err error) *mockspotClient_GetSpotSavings_Call {
	_c.Call.Return(advices, err)
	return _c
}

func (_c *mockspotClient_GetSpotSavings_Call) RunAndReturn(run func(ctx context.Context, opts ...spot.GetSpotSavingsOption) ([]spot.Advice, error)) *mockspotClient_GetSpotSavings_Call {
	_c.Call.Return(run)
	return _c
}
