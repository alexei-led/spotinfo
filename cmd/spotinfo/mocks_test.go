// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"
	"spotinfo/internal/spot"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSpotClient creates a new instance of MockSpotClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpotClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpotClient {
	mock := &MockSpotClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSpotClient is an autogenerated mock type for the SpotClient type
type MockSpotClient struct {
	mock.Mock
}

type MockSpotClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpotClient) EXPECT() *MockSpotClient_Expecter {
	return &MockSpotClient_Expecter{mock: &_m.Mock}
}

// GetSpotSavings provides a mock function for the type MockSpotClient
func (_mock *MockSpotClient) GetSpotSavings(ctx context.Context, regions []string, pattern string, instanceOS string, cpu int, memory int, maxPrice float64, sortBy spot.SortBy, sortDesc bool) ([]spot.Advice, error) {
	ret := _mock.Called(ctx, regions, pattern, instanceOS, cpu, memory, maxPrice, sortBy, sortDesc)

	if len(ret) == 0 {
		panic("no return value specified for GetSpotSavings")
	}

	var r0 []spot.Advice
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, string, string, int, int, float64, spot.SortBy, bool) ([]spot.Advice, error)); ok {
		return returnFunc(ctx, regions, pattern, instanceOS, cpu, memory, maxPrice, sortBy, sortDesc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, string, string, int, int, float64, spot.SortBy, bool) []spot.Advice); ok {
		r0 = returnFunc(ctx, regions, pattern, instanceOS, cpu, memory, maxPrice, sortBy, sortDesc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spot.Advice)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, string, string, int, int, float64, spot.SortBy, bool) error); ok {
		r1 = returnFunc(ctx, regions, pattern, instanceOS, cpu, memory, maxPrice, sortBy, sortDesc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSpotClient_GetSpotSavings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpotSavings'
type MockSpotClient_GetSpotSavings_Call struct {
	*mock.Call
}

// GetSpotSavings is a helper method to define mock.On call
//   - ctx context.Context
//   - regions []string
//   - pattern string
//   - instanceOS string
//   - cpu int
//   - memory int
//   - maxPrice float64
//   - sortBy spot.SortBy
//   - sortDesc bool
func (_e *MockSpotClient_Expecter) GetSpotSavings(ctx interface{}, regions interface{}, pattern interface{}, instanceOS interface{}, cpu interface{}, memory interface{}, maxPrice interface{}, sortBy interface{}, sortDesc interface{}) *MockSpotClient_GetSpotSavings_Call {
	return &MockSpotClient_GetSpotSavings_Call{Call: _e.mock.On("GetSpotSavings", ctx, regions, pattern, instanceOS, cpu, memory, maxPrice, sortBy, sortDesc)}
}

func (_c *MockSpotClient_GetSpotSavings_Call) Run(run func(ctx context.Context, regions []string, pattern string, instanceOS string, cpu int, memory int, maxPrice float64, sortBy spot.SortBy, sortDesc bool)) *MockSpotClient_GetSpotSavings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		var arg6 float64
		if args[6] != nil {
			arg6 = args[6].(float64)
		}
		var arg7 spot.SortBy
		if args[7] != nil {
			arg7 = args[7].(spot.SortBy)
		}
		var arg8 bool
		if args[8] != nil {
			arg8 = args[8].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockSpotClient_GetSpotSavings_Call) Return(advices []spot.Advice, err error) *MockSpotClient_GetSpotSavings_Call {
	_c.Call.Return(advices, err)
	return _c
}

func (_c *MockSpotClient_GetSpotSavings_Call) RunAndReturn(run func(ctx context.Context, regions []string, pattern string, instanceOS string, cpu int, memory int, maxPrice float64, sortBy spot.SortBy, sortDesc bool) ([]spot.Advice, error)) *MockSpotClient_GetSpotSavings_Call {
	_c.Call.Return(run)
	return _c
}
